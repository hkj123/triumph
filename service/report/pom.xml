<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.accumulate</groupId>
        <artifactId>triumph-service</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <artifactId>triumph-service-report</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>triumph-service-report</name>
    <description>report Center 业务主服务</description>

    <dependencies>
        <!--服务调用-->
        <dependency>
            <groupId>com.accumulate</groupId>
            <artifactId>triumph-entity</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!--主服务依赖jar-->
        <!--<dependency>-->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-starter-security</artifactId>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <!-- spring aop -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--运行打包的应用程序时，开发人员工具会自动禁用-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- 单元测试相关依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <!-- 连接mysql数据库驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!--@JsonFormat(pattern = "yyyy-MM-dd")-->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <!--json-smart json string 和json转化-->
        <dependency>
            <groupId>net.minidev</groupId>
            <artifactId>json-smart</artifactId>
            <version>RELEASE</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>RELEASE</version>
        </dependency>
        <!--httpclient-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${apache.common.lang3.version}</version>
        </dependency>

        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.9.7</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>compile</scope>
        </dependency>

        <!--Mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>${mybatis.spring.version}</version>
        </dependency>

        <!-- Mybatis Generator -->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.2</version>
            <scope>compile</scope>
            <optional>true</optional>
        </dependency>

        <!--分页插件 -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>${pagehelper.version}</version>
        </dependency>

        <!--通用Mapper -->
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper</artifactId>
            <version>${mapper.version}</version>
        </dependency>


        <!--&lt;!&ndash;restdoc&ndash;&gt;-->
        <!--<dependency>-->
            <!--<groupId>org.springframework.restdocs</groupId>-->
            <!--<artifactId>spring-restdocs-mockmvc</artifactId>-->
            <!--<version>1.2.1.RELEASE</version>-->
            <!--<scope>test</scope>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>com.h2database</groupId>-->
            <!--<artifactId>h2</artifactId>-->
            <!--<scope>runtime</scope>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>io.springfox</groupId>-->
            <!--<artifactId>springfox-staticdocs</artifactId>-->
            <!--<version>2.6.1</version>-->
        <!--</dependency>-->
    </dependencies>


    <build>
        <plugins>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker.plugin.version}</version>
                <configuration>
                    <imageName>triumph-business-dockerfile</imageName>
                    <dockerDirectory>src/main/docker</dockerDirectory>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.accumulate.report.ReportApplication</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- 文档生成插件 -->
            <!--${project.basedir}/src/main/asciidoc-->
            <!--基本都用过 maven 的 surefire 插件，生成文档的单元测试 .java 文件统一使用特定的后缀-->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-surefire-plugin</artifactId>-->
                <!--<configuration>-->
                    <!--<includes>-->
                        <!--<include>**/*Documentation.java</include>-->
                    <!--</includes>-->
                <!--</configuration>-->
            <!--</plugin>-->
            <!--&lt;!&ndash;添加Asciidoctor插件&ndash;&gt;-->
            <!--<plugin>-->
                <!--<groupId>org.asciidoctor</groupId>-->
                <!--<artifactId>asciidoctor-maven-plugin</artifactId>-->
                <!--<version>1.5.3</version>-->
                <!--&lt;!&ndash;配置通用文档生成设置&ndash;&gt;-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<id>generate-docs</id>-->
                        <!--<phase>prepare-package</phase>-->
                        <!--<goals>-->
                            <!--<goal>process-asciidoc</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<backend>html</backend>-->
                            <!--<doctype>book</doctype>-->
                            <!--<attributes>-->
                                <!--<snippets>${project.build.directory}/generated-snippets</snippets>-->
                            <!--</attributes>-->
                            <!--<sourceDirectory>${project.basedir}/src/main/asciidoc</sourceDirectory>-->
                            <!--<sourceDocumentName>api.adoc</sourceDocumentName>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
                <!--<dependencies>-->
                    <!--<dependency>-->
                        <!--<groupId>org.springframework.restdocs</groupId>-->
                        <!--<artifactId>spring-restdocs-asciidoctor</artifactId>-->
                        <!--<version>2.0.1.RELEASE</version>-->
                    <!--</dependency>-->
                <!--</dependencies>-->
            <!--</plugin>-->
            <!--&lt;!&ndash;jar中直接包含文档，可以在 maven-resources 插件中配置将文档添加到 jar 的指定目录中，如下是放到 static/docs 中&ndash;&gt;-->
            <!--<plugin>-->
                <!--<artifactId>maven-resources-plugin</artifactId>-->
                <!--<version>2.7</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<id>copy-resources</id>-->
                        <!--<phase>prepare-package</phase>-->
                        <!--<goals>-->
                            <!--<goal>copy-resources</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<outputDirectory>-->
                                <!--${project.build.outputDirectory}/static/docs-->
                            <!--</outputDirectory>-->
                            <!--<resources>-->
                                <!--<resource>-->
                                    <!--<directory>-->
                                        <!--${project.build.directory}/generated-docs-->
                                    <!--</directory>-->
                                <!--</resource>-->
                            <!--</resources>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->

        </plugins>
    </build>

</project>
